//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IWPOCTCamera : global::System.IDisposable
{
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;

    internal IWPOCTCamera(global::System.IntPtr cPtr, bool cMemoryOwn)
    {
        swigCMemOwn = cMemoryOwn;
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }

    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IWPOCTCamera obj)
    {
        return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }

    ~IWPOCTCamera()
    {
        Dispose();
    }

    public virtual void Dispose()
    {
        lock (this)
        {
            if (swigCPtr.Handle != global::System.IntPtr.Zero)
            {
                if (swigCMemOwn)
                {
                    swigCMemOwn = false;
                    UtensilCameraPINVOKE.delete_IWPOCTCamera(swigCPtr);
                }
                swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
            }
            global::System.GC.SuppressFinalize(this);
        }
    }

    public virtual bool IsInitialized()
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_IsInitialized(swigCPtr);
        return ret;
    }

    public virtual bool IsOpened()
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_IsOpened(swigCPtr);
        return ret;
    }

    public virtual bool AreParametersSet()
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_AreParametersSet(swigCPtr);
        return ret;
    }

    public virtual bool IsAcquiring()
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_IsAcquiring(swigCPtr);
        return ret;
    }

    public virtual int GetScanWidth()
    {
        int ret = UtensilCameraPINVOKE.IWPOCTCamera_GetScanWidth(swigCPtr);
        return ret;
    }

    public virtual int GetScanHeight()
    {
        int ret = UtensilCameraPINVOKE.IWPOCTCamera_GetScanHeight(swigCPtr);
        return ret;
    }

    public virtual bool GetScanWidthAndHeight(ref int width, ref int height)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_GetScanWidthAndHeight(swigCPtr, ref width, ref height);
        return ret;
    }

    public virtual int GetCameraWidth()
    {
        int ret = UtensilCameraPINVOKE.IWPOCTCamera_GetCameraWidth(swigCPtr);
        return ret;
    }

    public virtual int GetNumCameras()
    {
        int ret = UtensilCameraPINVOKE.IWPOCTCamera_GetNumCameras(swigCPtr);
        return ret;
    }

    public virtual string GetCameraID(int index)
    {
        string ret = UtensilCameraPINVOKE.IWPOCTCamera_GetCameraID(swigCPtr, index);
        return ret;
    }

    public virtual int GetNumBuffers()
    {
        int ret = UtensilCameraPINVOKE.IWPOCTCamera_GetNumBuffers(swigCPtr);
        return ret;
    }

    public virtual int GetLinesLost()
    {
        int ret = UtensilCameraPINVOKE.IWPOCTCamera_GetLinesLost(swigCPtr);
        return ret;
    }

    public virtual int GetTriggersMissed()
    {
        int ret = UtensilCameraPINVOKE.IWPOCTCamera_GetTriggersMissed(swigCPtr);
        return ret;
    }

    public virtual float GetLinePeriod()
    {
        float ret = UtensilCameraPINVOKE.IWPOCTCamera_GetLinePeriod(swigCPtr);
        return ret;
    }

    public virtual float GetExposureTime()
    {
        float ret = UtensilCameraPINVOKE.IWPOCTCamera_GetExposureTime(swigCPtr);
        return ret;
    }

    public virtual int GetTriggerMode()
    {
        int ret = UtensilCameraPINVOKE.IWPOCTCamera_GetTriggerMode(swigCPtr);
        return ret;
    }

    public virtual int GetCameraType()
    {
        int ret = UtensilCameraPINVOKE.IWPOCTCamera_GetCameraType(swigCPtr);
        return ret;
    }

    public virtual int GetNumBitsInPixel()
    {
        int ret = UtensilCameraPINVOKE.IWPOCTCamera_GetNumBitsInPixel(swigCPtr);
        return ret;
    }

    public virtual int GetNumBytesInPixel()
    {
        int ret = UtensilCameraPINVOKE.IWPOCTCamera_GetNumBytesInPixel(swigCPtr);
        return ret;
    }

    public virtual int GetAcquisitionTimeout()
    {
        int ret = UtensilCameraPINVOKE.IWPOCTCamera_GetAcquisitionTimeout(swigCPtr);
        return ret;
    }

    public virtual int GetResourceIndex()
    {
        int ret = UtensilCameraPINVOKE.IWPOCTCamera_GetResourceIndex(swigCPtr);
        return ret;
    }

    public virtual string GetCameraFileName()
    {
        string ret = UtensilCameraPINVOKE.IWPOCTCamera_GetCameraFileName(swigCPtr);
        return ret;
    }

    public virtual bool SetScanHeight(int value)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_SetScanHeight(swigCPtr, value);
        return ret;
    }

    public virtual bool SetNumBuffers(int value)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_SetNumBuffers(swigCPtr, value);
        return ret;
    }

    public virtual bool SetLinePeriod(float value)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_SetLinePeriod(swigCPtr, value);
        return ret;
    }

    public virtual bool SetExposureTime(float value)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_SetExposureTime(swigCPtr, value);
        return ret;
    }

    public virtual bool SetTriggerMode(int value)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_SetTriggerMode(swigCPtr, value);
        return ret;
    }

    public virtual bool SetCameraFileName(string name)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_SetCameraFileName(swigCPtr, name);
        return ret;
    }

    public virtual bool SetAcquisitionTimeout(int value)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_SetAcquisitionTimeout(swigCPtr, value);
        return ret;
    }

    public virtual bool SetResourceIndex(int value)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_SetResourceIndex(swigCPtr, value);
        return ret;
    }

    public virtual bool InitializeLibrary()
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_InitializeLibrary(swigCPtr);
        return ret;
    }

    public virtual bool ShutDownLibrary()
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_ShutDownLibrary(swigCPtr);
        return ret;
    }

    public virtual bool Open(string id)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_Open__SWIG_0(swigCPtr, id);
        return ret;
    }

    public virtual bool Open(int id)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_Open__SWIG_1(swigCPtr, id);
        return ret;
    }

    public virtual bool Close()
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_Close(swigCPtr);
        return ret;
    }

    public virtual bool ReadParameter(uint address, ref uint value)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_ReadParameter(swigCPtr, address, ref value);
        return ret;
    }

    public virtual bool WriteParameter(uint address, uint value)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_WriteParameter(swigCPtr, address, value);
        return ret;
    }

    public virtual bool SetParameters()
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_SetParameters__SWIG_0(swigCPtr);
        return ret;
    }

    public virtual bool SetParameters(int height, int numBuffers)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_SetParameters__SWIG_1(swigCPtr, height, numBuffers);
        return ret;
    }

    public virtual bool StartAcquiring()
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_StartAcquiring(swigCPtr);
        return ret;
    }

    public virtual bool StopAcquiring(bool flushBuffers)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_StopAcquiring(swigCPtr, flushBuffers);
        return ret;
    }

    public virtual bool GetBuffer(ref global::System.IntPtr buffer)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_GetBuffer(swigCPtr, ref buffer);
        return ret;
    }

    public virtual bool GetBuffer2(ref global::System.IntPtr buffer)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_GetBuffer2(swigCPtr, ref buffer);
        return ret;
    }

    public unsafe bool GetBufferCopy(ushort[] buffer)
    {
        fixed (ushort* swig_ptrTo_buffer = buffer)
        {
            {
                bool ret = UtensilCameraPINVOKE.IWPOCTCamera_GetBufferCopy(swigCPtr, (global::System.IntPtr)swig_ptrTo_buffer);
                return ret;
            }
        }
    }

    public virtual bool GetBufferAndIndex(ref global::System.IntPtr buffer, ref global::System.IntPtr index, ref ulong frameNumber)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_GetBufferAndIndex(swigCPtr, ref buffer, ref index, ref frameNumber);
        return ret;
    }

    public virtual bool GetBufferAndIndex2(ref global::System.IntPtr buffer, ref global::System.IntPtr index, ref ulong frameNumber)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_GetBufferAndIndex2(swigCPtr, ref buffer, ref index, ref frameNumber);
        return ret;
    }

    public virtual bool AbortGetBuffer()
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_AbortGetBuffer(swigCPtr);
        return ret;
    }

    public virtual bool RequeueBuffer()
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_RequeueBuffer__SWIG_0(swigCPtr);
        return ret;
    }

    public virtual bool RequeueBuffer(ref int bufferHandle)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_RequeueBuffer__SWIG_1(swigCPtr, ref bufferHandle);
        return ret;
    }

    public virtual bool FlushBuffers()
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_FlushBuffers(swigCPtr);
        return ret;
    }

    public virtual bool ResetDevice()
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_ResetDevice(swigCPtr);
        return ret;
    }

    public virtual bool AcquireFramesWriteToDisk(string baseFilePath, int numFrames, bool keepMemoryAllocated)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_AcquireFramesWriteToDisk(swigCPtr, baseFilePath, numFrames, keepMemoryAllocated);
        return ret;
    }

    public unsafe bool AcquireWriteFramesToMemory(ref global::System.IntPtr data, int numFrames)
    {
        bool ret = UtensilCameraPINVOKE.IWPOCTCamera_AcquireWriteFramesToMemory__SWIG_0(swigCPtr, ref data, numFrames);
        return ret;
    }

    public unsafe bool AcquireWriteFramesToMemory(ushort[] data, int numFrames)
    {
        fixed (ushort* swig_ptrTo_data = data)
        {
            {
                bool ret = UtensilCameraPINVOKE.IWPOCTCamera_AcquireWriteFramesToMemory__SWIG_1(swigCPtr, (global::System.IntPtr)swig_ptrTo_data, numFrames);
                return ret;
            }
        }
    }

    public virtual IWPOCTCamera.ErrorCode GetLastError()
    {
        IWPOCTCamera.ErrorCode ret = (IWPOCTCamera.ErrorCode)UtensilCameraPINVOKE.IWPOCTCamera_GetLastError(swigCPtr);
        return ret;
    }

    public virtual IWPOCTCamera.CurrentStates GetCurrentState()
    {
        IWPOCTCamera.CurrentStates ret = (IWPOCTCamera.CurrentStates)UtensilCameraPINVOKE.IWPOCTCamera_GetCurrentState(swigCPtr);
        return ret;
    }

    public static IWPOCTCamera GetOCTCamera(IWPOCTCamera.CameraType cameraType)
    {
        global::System.IntPtr cPtr = UtensilCameraPINVOKE.IWPOCTCamera_GetOCTCamera((int)cameraType);
        IWPOCTCamera ret = (cPtr == global::System.IntPtr.Zero) ? null : new IWPOCTCamera(cPtr, false);
        return ret;
    }

    public static IWPOCTCamera.ErrorCode GetLastAttemptError()
    {
        IWPOCTCamera.ErrorCode ret = (IWPOCTCamera.ErrorCode)UtensilCameraPINVOKE.IWPOCTCamera_GetLastAttemptError();
        return ret;
    }

  public static bool DestroyOCTCamera(IWPOCTCamera camera) {
    bool ret = UtensilCameraPINVOKE.IWPOCTCamera_DestroyOCTCamera__SWIG_0(IWPOCTCamera.getCPtr(camera));
    return ret;
  }

  public static bool DestroyOCTCamera() {
    bool ret = UtensilCameraPINVOKE.IWPOCTCamera_DestroyOCTCamera__SWIG_1();
    return ret;
  }

  public enum ErrorCode {
    NoError = 0,
    InitializeLibraryError = 1,
    ShutdownLibraryError = 2,
    UpdateCameraListError = 3,
    GetCameraInfoError = 4,
    OpenCameraError = 5,
    CloseCameraError = 6,
    MemoryAllocationError = 7,
    ProcessingError = 8,
    ReadParameterError = 9,
    SetParameterError = 10,
    StartAcquiringError = 11,
    StopAcquiringError = 12,
    GetBufferError = 13,
    BufferCompletedWithZeros = 14,
    AbortGetBufferError = 15,
    RequeueBufferError = 16,
    FlushBufferError = 17,
    TimeoutError = 18,
    CameraFileError = 19,
    DongleNotFound = 20,
    NumErrors = 21,
    DLLExpired = 22
  }

  public enum CameraType {
    NoCamera = 0,
    USB3 = 1,
    CameraLink = 2,
    NI1433 = 3,
    NumCameras = 4
  }

  public enum CurrentStates {
    Idle = 0,
    LibraryInitialized = 1,
    CameraOpened = 2,
    ParametersSet = 4,
    CameraAcquiring = 8
  }

}
