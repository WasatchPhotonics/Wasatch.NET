#!/bin/bash
################################################################################
#                                  deploy                                      #
################################################################################
#                                                                              #
#  DESCRIPTION:  Quick script to consistently and reliably upload releases     #
#                to our website.                                               #
#                                                                              #
#  AUTHOR:       Mark Zieg <mzieg@wasatchphotonics.com>                        #
#                                                                              #
################################################################################

function validateAssemblyVersion()
{
    local PROJ="$1"

    ASSEMBLY_INFO="${PROJ}/Properties/AssemblyInfo.cs"

    if ! egrep -q "AssemblyVersion\\(\"${VERSION}\\.0\"\\)" $ASSEMBLY_INFO
    then
        echo "ERROR: wrong AssemblyVersion in $ASSEMBLY_INFO"
        exit 1
    fi

    if ! egrep -q "AssemblyFileVersion\\(\"${VERSION}\\.0\"\\)" $ASSEMBLY_INFO
    then
        echo "ERROR: wrong AssemblyFileVersion in $ASSEMBLY_INFO"
        exit 1
    fi
}

function verifyExists()
{
    local ARCH="$1"
    LOCAL_NAME="WasatchNET-${ARCH}-${VERSION}.msi"
    LOCAL_PATH="${ARCH}/Debug/$LOCAL_NAME"

    if ! [ -f $LOCAL_PATH ]
    then
        echo "ERROR: can't find $LOCAL_PATH"
        exit 1
    fi
}

function postAndRename()
{
    local ARCH="$1"
    
    LOCAL_NAME="WasatchNET-${ARCH}-${VERSION}.msi"
    LOCAL_PATH="${ARCH}/Debug/$LOCAL_NAME"

    REMOTE_NAME="WasatchNET-${VERSION}-${ARCH}.msi"
    REMOTE_PATH="www/binaries/drivers/Wasatch.NET/$REMOTE_NAME"

    scp $LOCAL_PATH $USERNAME@wasatchphotonics.com:$REMOTE_PATH
}

for arch in x86 x64
do
    cp -v WasatchNET/bin/$arch/Debug/WasatchNET.{dll,pdb} lib/$arch
done

read -p "Username: " USERNAME
read -p "Version:  " VERSION 

# make sure we're releasing off master
BRANCH=`git rev-parse --abbrev-ref HEAD`
if [ $BRANCH != "master" ]
then
    echo "Please release off master (currently on $BRANCH)"
    exit 1
fi

# render documentation (TODO: incorporate VERSION into rendered docs)
export VERSION
make doc

# echo
# read -p "Press return to continue..." FOO

# verify version number is consistent (postAndRename handles for MSI)
validateAssemblyVersion "WasatchNET"
validateAssemblyVersion "WinFormDemo"

# verify version number is tagged
if git tag | egrep -q $VERSION
then
    echo "Git tag found"
else
    echo "Git tag not found: $VERSION"
    exit 1
fi

# verify installers
verifyExists "Setup32"
verifyExists "Setup64"

# upload installers
postAndRename "Setup32"
postAndRename "Setup64"

# upload documentation
rsync --archive doc/doxygen/html/ ${USERNAME}@wasatchphotonics.com:www/api/Wasatch.NET/

# copy locally
make deploy
